import Vue from 'vue';
import { urn_response } from "urn-lib";
import uranio from 'uranio/client';
declare type Data<A extends uranio.schema.AtomName> = {
    atom_name: A;
    molecule: uranio.schema.Molecule<A, 1>;
    plural: string;
    back_label: string;
    message: string;
    success: boolean;
    title: string;
    error_object: urn_response.Fail<any>;
    data_object: urn_response.General<any, any>;
    previous_url: string;
    is_read_only: boolean;
};
declare type Methods<A extends uranio.schema.AtomName> = {
    modal_atom_selected: (id: string | string[]) => void;
    submit: (event: Event) => Promise<void>;
    submit_exit: (event: Event) => Promise<void>;
    fail: (trx_response: urn_response.Fail<any>) => void;
    exit: () => void;
    assign_molecule: <D extends uranio.schema.Depth>(molecule: uranio.schema.Molecule<A, D>) => void;
    update: <D extends uranio.schema.Depth>() => Promise<urn_response.General<uranio.schema.Molecule<A, D>>>;
    external_submit: (event: Event) => void;
    external_submit_exit: (event: Event) => void;
    delete_atom: () => Promise<void>;
    go_back: () => void;
};
declare type Computed = Record<string, never>;
declare type Props = Record<string, never>;
declare const _default: import("vue/types/vue").ExtendedVue<Vue, Data<uranio.core.schema.AtomName>, Methods<uranio.core.schema.AtomName>, Computed, Props>;
export default _default;
